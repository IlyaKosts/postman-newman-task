{
	"info": {
		"_postman_id": "b77d50dd-265e-439b-a2f5-4784c91508db",
		"name": "store",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "11577640"
	},
	"item": [
		{
			"name": "For products",
			"item": [
				{
					"name": "Check the list of products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\",\r",
									"      \"minimum\":10,\r",
									"      \"maximum\":30\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"price\",\r",
									"    \"sku\",\r",
									"    \"description\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{productsUrl}}"
					},
					"response": []
				},
				{
					"name": "Check the list of products - pagination (return 2 elements)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//In \"For orders\" I showed inother example of this request, with only one element.\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\",\r",
									"      \"minimum\":10,\r",
									"      \"maximum\":30\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"price\",\r",
									"    \"sku\",\r",
									"    \"description\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{productsUrl}}?page=1&pageSize=2",
							"host": [
								"{{productsUrl}}"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the list of products - sorting (by price)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\",\r",
									"      \"minimum\":10,\r",
									"      \"maximum\":30\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"price\",\r",
									"    \"sku\",\r",
									"    \"description\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{productsUrl}}?sortOrder=ASC&sortKey=price",
							"host": [
								"{{productsUrl}}"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the list of products - sorting (by name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\",\r",
									"      \"minimum\":10,\r",
									"      \"maximum\":30\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"price\",\r",
									"    \"sku\",\r",
									"    \"description\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{productsUrl}}?sortOrder=ASC&sortKey=name",
							"host": [
								"{{productsUrl}}"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Products, boundary values (min by ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Json = pm.response.json();\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\",\r",
									"      \"minimum\":10,\r",
									"      \"maximum\":30\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"price\",\r",
									"    \"sku\",\r",
									"    \"description\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Check the response elements\", () => {\r",
									"  pm.expect(Json.name).to.eql(\"tomato\");\r",
									"  pm.expect(Json.price).to.eql(10);\r",
									"  pm.expect(Json.sku).to.eql(1232143543543);\r",
									"  pm.expect(Json.description).to.eql(\"They are usually red, scarlet, or yellow, though green and purple varieties do exist, and they vary in shape from almost spherical to oval and elongate to pear-shaped.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{productsUrl}}/:id",
							"host": [
								"{{productsUrl}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Products, boundary values, check '0' ID value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the staus code (should be 404)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"pm.test(\"Successful DELETE request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{productsUrl}}/:id",
							"host": [
								"{{productsUrl}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Products, boundary values (max by ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Json = pm.response.json();\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\",\r",
									"      \"minimum\":10,\r",
									"      \"maximum\":30\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"price\",\r",
									"    \"sku\",\r",
									"    \"description\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Check the response elements\", () => {\r",
									"  pm.expect(Json.name).to.eql(\"apple\");\r",
									"  pm.expect(Json.price).to.eql(30);\r",
									"  pm.expect(Json.sku).to.eql(999921312423312);\r",
									"  pm.expect(Json.description).to.eql(\"awesome\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{productsUrl}}/:id",
							"host": [
								"{{productsUrl}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Products, boundary values (max by ID) - Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the staus code (should be 404)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"pm.test(\"Successful DELETE request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{productsUrl}}/:id",
							"host": [
								"{{productsUrl}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Json = pm.response.json();\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\",\r",
									"      \"minimum\":10,\r",
									"      \"maximum\":30\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"price\",\r",
									"    \"sku\",\r",
									"    \"description\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check POST request(status code one of: 201,202)\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"});\r",
									"pm.test(\"Successful POST request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Check the response elements\", () => {\r",
									"  pm.expect(Json.name).to.eql(\"bubble gum\");\r",
									"  pm.expect(Json.price).to.eql(30);\r",
									"  pm.expect(Json.sku).to.eql(999921312423789);\r",
									"  pm.expect(Json.description).to.eql(\"SOomething spetial for you.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"bubble gum\",\r\n        \"price\": 30,\r\n        \"sku\": 999921312423789,\r\n        \"description\": \"SOomething spetial for you.\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{productsUrl}}"
					},
					"response": []
				},
				{
					"name": "Create new product - Negative (invalid JSON)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the staus code (should be 400)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(400);\r",
									"});\r",
									"pm.test(\"Successful DELETE request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"bubble gum\",\r\n        \"price\": 30,\r\n        \"sku\": 999921312423789,\r\n        \"description\": \"SOomething spetial for you.\"\r\n        \"weight\": \"weight\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{productsUrl}}"
					},
					"response": []
				},
				{
					"name": "Update (edit) the new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Json = pm.response.json();\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\",\r",
									"      \"minimum\":10,\r",
									"      \"maximum\":30\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"price\",\r",
									"    \"sku\",\r",
									"    \"description\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful PUT request(status text: 'OK')\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Check the response elements\", () => {\r",
									"  pm.expect(Json.name).to.eql(\"bubble gum\");\r",
									"  pm.expect(Json.price).to.eql(30);\r",
									"  pm.expect(Json.sku).to.eql(999921312423908);\r",
									"  pm.expect(Json.description).to.eql(\"Something spetial for you.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"bubble gum\",\r\n        \"price\": 30,\r\n        \"sku\": 999921312423908,\r\n        \"description\": \"Something spetial for you.\",\r\n        \"id\":4\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{productsUrl}}"
					},
					"response": []
				},
				{
					"name": "Update (edit) the new product - Negative (invalid JSON)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the staus code (should be 404)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"pm.test(\"Successful PUT request(status text: 'OK')\", () => {\r",
									"  pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"bubble gum\",\r\n        \"price\": 30,\r\n        \"sku\": 999921312423908,\r\n        \"description\": \"Something spetial for you.\",\r\n        \"colour\": \"blue\",\r\n        \"id\":10\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{productsUrl}}"
					},
					"response": []
				},
				{
					"name": "Delete the new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Json = pm.response.json();\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\",\r",
									"      \"minimum\":10,\r",
									"      \"maximum\":30\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"price\",\r",
									"    \"sku\",\r",
									"    \"description\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Check the response elements\", () => {\r",
									"  pm.expect(Json.name).to.eql(\"bubble gum\");\r",
									"  pm.expect(Json.price).to.eql(30);\r",
									"  pm.expect(Json.sku).to.eql(999921312423908);\r",
									"  pm.expect(Json.description).to.eql(\"Something spetial for you.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{productsUrl}}/:id",
							"host": [
								"{{productsUrl}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the new product - Negative(invalid ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{productsUrl}}/:id",
							"host": [
								"{{productsUrl}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "71"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "For orders",
			"item": [
				{
					"name": "Check the list of orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"  },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"sku\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{ordersUrl}}"
					},
					"response": []
				},
				{
					"name": "Check the list of orders - pagination (return first element)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"  },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"sku\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ordersUrl}}?page=1&pageSize=1",
							"host": [
								"{{ordersUrl}}"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the list of orders - sorting (by sku)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"  },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"sku\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ordersUrl}}?sortOrder=ASC&sortKey=sku",
							"host": [
								"{{ordersUrl}}"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "sku"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the list of orders - sorting (by name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"  },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"sku\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ordersUrl}}?sortOrder=ASC&sortKey=name",
							"host": [
								"{{ordersUrl}}"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Orders, boundary values (min by ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Json = pm.response.json();\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"  },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"sku\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Check the response elements\", () => {\r",
									"  pm.expect(Json.name).to.eql(\"order1\");\r",
									"  pm.expect(Json.sku).to.eql(1232143543543);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ordersUrl}}/:id",
							"host": [
								"{{ordersUrl}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Orders, boundary values, check '0' ID value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the staus code (should be 404)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"pm.test(\"Successful DELETE request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ordersUrl}}/:id",
							"host": [
								"{{ordersUrl}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Orders, boundary values (max by ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Json = pm.response.json();\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"  },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"sku\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Check the response elements\", () => {\r",
									"  pm.expect(Json.name).to.eql(\"order2\");\r",
									"  pm.expect(Json.sku).to.eql(999921312423312);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ordersUrl}}/:id",
							"host": [
								"{{ordersUrl}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Orders, boundary values (max by ID) - Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the staus code (should be 404)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"pm.test(\"Successful DELETE request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ordersUrl}}/:id",
							"host": [
								"{{ordersUrl}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Json = pm.response.json();\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"  },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"sku\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check POST request(status code one of: 201,202)\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"});\r",
									"pm.test(\"Successful POST request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Check the response elements\", () => {\r",
									"  pm.expect(Json.name).to.eql(\"ordeR4\");\r",
									"  pm.expect(Json.sku).to.eql(99992131242890);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"ordeR4\",\r\n        \"sku\": 99992131242890\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{ordersUrl}}"
					},
					"response": []
				},
				{
					"name": "Create new order - Negative (invalid JSON)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the staus code (should be 400)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(400);\r",
									"});\r",
									"pm.test(\"Successful DELETE request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"ordeR4\",\r\n        \"sku\": 99992131242890\r\n        \"customer\": \"customer\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{ordersUrl}}"
					},
					"response": []
				},
				{
					"name": "Update (edit) the new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Json = pm.response.json();\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"  },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"sku\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Check the response elements\", () => {\r",
									"  pm.expect(Json.name).to.eql(\"order4\");\r",
									"  pm.expect(Json.sku).to.eql(99992131242879);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"order4\",\r\n        \"sku\": 99992131242879,\r\n        \"id\": 4\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{ordersUrl}}"
					},
					"response": []
				},
				{
					"name": "Update (edit) the new order- Negative (invalid JSON)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the staus code (should be 404)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"pm.test(\"Successful PUT request(status text: 'OK')\", () => {\r",
									"  pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"order20\",\r\n    \"sku\": 99992180742879,\r\n    \"id\": 7\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{ordersUrl}}"
					},
					"response": []
				},
				{
					"name": "Delete the new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Json = pm.response.json();\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"  },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"sku\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Check the response elements\", () => {\r",
									"  pm.expect(Json.name).to.eql(\"order4\");\r",
									"  pm.expect(Json.sku).to.eql(99992131242879);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ordersUrl}}/:id",
							"host": [
								"{{ordersUrl}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the new order - Negative(invalid ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ordersUrl}}/:id",
							"host": [
								"{{ordersUrl}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "111"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "For users",
			"item": [
				{
					"name": "Check the list of users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"firstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"dateOfBirth\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"emailVerified\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"signUpDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"     \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"level\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"firstName\",\r",
									"    \"lastName\",\r",
									"    \"email\",\r",
									"    \"dateOfBirth\",\r",
									"    \"emailVerified\",\r",
									"    \"signUpDate\",\r",
									"    \"status\",\r",
									"    \"level\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{usersUrl}}"
					},
					"response": []
				},
				{
					"name": "Check the list of users - pagination (return first element)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"firstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"dateOfBirth\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"emailVerified\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"signUpDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"     \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"level\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"firstName\",\r",
									"    \"lastName\",\r",
									"    \"email\",\r",
									"    \"dateOfBirth\",\r",
									"    \"emailVerified\",\r",
									"    \"signUpDate\",\r",
									"    \"status\",\r",
									"    \"level\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersUrl}}?page=1&pageSize=1",
							"host": [
								"{{usersUrl}}"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the list of users - sorting (by email verification)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"firstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"dateOfBirth\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"emailVerified\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"signUpDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"     \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"level\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"firstName\",\r",
									"    \"lastName\",\r",
									"    \"email\",\r",
									"    \"dateOfBirth\",\r",
									"    \"emailVerified\",\r",
									"    \"signUpDate\",\r",
									"    \"status\",\r",
									"    \"level\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersUrl}}?sortOrder=ASC&sortKey=emailVerified",
							"host": [
								"{{usersUrl}}"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "emailVerified"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the list of users - sorting (by firstName)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"firstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"dateOfBirth\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"emailVerified\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"signUpDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"     \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"level\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"firstName\",\r",
									"    \"lastName\",\r",
									"    \"email\",\r",
									"    \"dateOfBirth\",\r",
									"    \"emailVerified\",\r",
									"    \"signUpDate\",\r",
									"    \"status\",\r",
									"    \"level\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersUrl}}?sortOrder=ASC&sortKey=emailVerified",
							"host": [
								"{{usersUrl}}"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "emailVerified"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users, boundary values (min by ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Json = pm.response.json();\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"firstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"dateOfBirth\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"emailVerified\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"signUpDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"     \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"level\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"firstName\",\r",
									"    \"lastName\",\r",
									"    \"email\",\r",
									"    \"dateOfBirth\",\r",
									"    \"emailVerified\",\r",
									"    \"signUpDate\",\r",
									"    \"status\",\r",
									"    \"level\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Check the response elements\", () => {\r",
									"  pm.expect(Json.firstName).to.eql(\"Alice\");\r",
									"  pm.expect(Json.lastName).to.eql(\"Smith\");\r",
									"  pm.expect(Json.email).to.eql(\"alice.smith@gmail.com\");\r",
									"  pm.expect(Json.dateOfBirth).to.eql(\"1997-10-31\");\r",
									"  pm.expect(Json.emailVerified).to.eql(true);\r",
									"  pm.expect(Json.signUpDate).to.eql(\"2019-08-24\");\r",
									"  pm.expect(Json.status).to.eql(\"active\");\r",
									"  pm.expect(Json.level).to.eql(\"admin\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersUrl}}/:id",
							"host": [
								"{{usersUrl}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users, boundary values, check '0' ID value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the staus code (should be 404)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"pm.test(\"Successful DELETE request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersUrl}}/:id",
							"host": [
								"{{usersUrl}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users, boundary values (max by ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Json = pm.response.json();\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"firstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"dateOfBirth\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"emailVerified\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"signUpDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"     \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"level\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"firstName\",\r",
									"    \"lastName\",\r",
									"    \"email\",\r",
									"    \"dateOfBirth\",\r",
									"    \"emailVerified\",\r",
									"    \"signUpDate\",\r",
									"    \"status\",\r",
									"    \"level\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Check the response elements\", () => {\r",
									"  pm.expect(Json.firstName).to.eql(\"asdasd\");\r",
									"  pm.expect(Json.lastName).to.eql(\"asd\");\r",
									"  pm.expect(Json.email).to.eql(\"asdasd.smith@gmail.com\");\r",
									"  pm.expect(Json.dateOfBirth).to.eql(\"1997-10-31\");\r",
									"  pm.expect(Json.emailVerified).to.eql(false);\r",
									"  pm.expect(Json.signUpDate).to.eql(\"2019-08-24\");\r",
									"  pm.expect(Json.status).to.eql(\"active\");\r",
									"  pm.expect(Json.level).to.eql(\"consumer\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersUrl}}/:id",
							"host": [
								"{{usersUrl}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users, boundary values (max by ID) - Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the staus code (should be 404)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"pm.test(\"Successful DELETE request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersUrl}}/:id",
							"host": [
								"{{usersUrl}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Json = pm.response.json();\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"firstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"dateOfBirth\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"emailVerified\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"signUpDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"     \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"level\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"firstName\",\r",
									"    \"lastName\",\r",
									"    \"email\",\r",
									"    \"dateOfBirth\",\r",
									"    \"emailVerified\",\r",
									"    \"signUpDate\",\r",
									"    \"status\",\r",
									"    \"level\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check POST request(status code)\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"});\r",
									"pm.test(\"Successful POST request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Check the response elements\", () => {\r",
									"  pm.expect(Json.firstName).to.eql(\"asdasd\");\r",
									"  pm.expect(Json.lastName).to.eql(\"asd\");\r",
									"  pm.expect(Json.email).to.eql(\"bob.mail@gmail.com\");\r",
									"  pm.expect(Json.dateOfBirth).to.eql(\"2000-11-23\");\r",
									"  pm.expect(Json.emailVerified).to.eql(false);\r",
									"  pm.expect(Json.signUpDate).to.eql(\"2022-08-27\");\r",
									"  pm.expect(Json.status).to.eql(\"active\");\r",
									"  pm.expect(Json.level).to.eql(\"consumer\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"firstName\": \"asdasd\",\r\n        \"lastName\": \"asd\",\r\n        \"email\": \"bob.mail@gmail.com\",\r\n        \"dateOfBirth\": \"2000-11-23\",\r\n        \"emailVerified\": false,\r\n        \"signUpDate\": \"2022-08-27\",\r\n        \"status\": \"active\",\r\n        \"level\": \"consumer\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{usersUrl}}"
					},
					"response": []
				},
				{
					"name": "Create new user - Negative (invalid JSON)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the staus code (should be 400)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(400);\r",
									"});\r",
									"pm.test(\"Successful DELETE request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 11,\r\n        \"firstName\": \"asdasd\",\r\n        \"lastName\": \"asd\",\r\n        \"email\": \"bob.mail@gmail.com\",\r\n        \"dateOfBirth\": \"2000-11-23\",\r\n        \"emailVerified\": false,\r\n        \"signUpDate\": \"2022-08-27\",\r\n        \"status\": \"active\",\r\n        \"level\": \"consumer\"\r\n        \"role\": \"role\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{usersUrl}}"
					},
					"response": []
				},
				{
					"name": "Update (edit) the new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Json = pm.response.json();\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"firstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"dateOfBirth\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"emailVerified\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"signUpDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"     \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"level\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"firstName\",\r",
									"    \"lastName\",\r",
									"    \"email\",\r",
									"    \"dateOfBirth\",\r",
									"    \"emailVerified\",\r",
									"    \"signUpDate\",\r",
									"    \"status\",\r",
									"    \"level\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful PUT request(status text: 'OK')\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Check the response elements\", () => {\r",
									"  pm.expect(Json.firstName).to.eql(\"bob\");\r",
									"  pm.expect(Json.lastName).to.eql(\"bobovsky\");\r",
									"  pm.expect(Json.email).to.eql(\"bob.mail@gmail.com\");\r",
									"  pm.expect(Json.dateOfBirth).to.eql(\"2000-11-23\");\r",
									"  pm.expect(Json.emailVerified).to.eql(false);\r",
									"  pm.expect(Json.signUpDate).to.eql(\"2022-08-27\");\r",
									"  pm.expect(Json.status).to.eql(\"active\");\r",
									"  pm.expect(Json.level).to.eql(\"consumer\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"firstName\": \"bob\",\r\n        \"lastName\": \"bobovsky\",\r\n        \"email\": \"bob.mail@gmail.com\",\r\n        \"dateOfBirth\": \"2000-11-23\",\r\n        \"emailVerified\": false,\r\n        \"signUpDate\": \"2022-08-27\",\r\n        \"status\": \"active\",\r\n        \"level\": \"consumer\",\r\n        \"id\": 11\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{usersUrl}}"
					},
					"response": []
				},
				{
					"name": "Update (edit) the new user - Negative (invalid JSON(ID))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the staus code (should be 404)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"pm.test(\"Successful PUT request(status text: 'OK')\", () => {\r",
									"  pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"firstName\": \"bob\",\r\n        \"lastName\": \"bobovsky\",\r\n        \"email\": \"bob.mail@gmail.com\",\r\n        \"dateOfBirth\": \"2000-11-23\",\r\n        \"emailVerified\": false,\r\n        \"signUpDate\": \"2022-08-27\",\r\n        \"status\": \"active\",\r\n        \"level\": \"consumer\",\r\n        \"id\":33\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{usersUrl}}"
					},
					"response": []
				},
				{
					"name": "Delete the new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Json = pm.response.json();\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"    \"firstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"dateOfBirth\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"emailVerified\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"signUpDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"     \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"level\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"firstName\",\r",
									"    \"lastName\",\r",
									"    \"email\",\r",
									"    \"dateOfBirth\",\r",
									"    \"emailVerified\",\r",
									"    \"signUpDate\",\r",
									"    \"status\",\r",
									"    \"level\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful PUT request(status text: 'OK')\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test('JSON schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Check the response elements\", () => {\r",
									"  pm.expect(Json.firstName).to.eql(\"bob\");\r",
									"  pm.expect(Json.lastName).to.eql(\"bobovsky\");\r",
									"  pm.expect(Json.email).to.eql(\"bob.mail@gmail.com\");\r",
									"  pm.expect(Json.dateOfBirth).to.eql(\"2000-11-23\");\r",
									"  pm.expect(Json.emailVerified).to.eql(false);\r",
									"  pm.expect(Json.signUpDate).to.eql(\"2022-08-27\");\r",
									"  pm.expect(Json.status).to.eql(\"active\");\r",
									"  pm.expect(Json.level).to.eql(\"consumer\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{usersUrl}}/:id",
							"host": [
								"{{usersUrl}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "11"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the new product - Negative(invalid ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the staus code (should be 200)\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Successful GET request(status text)\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time check (should be less than 300ms)\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{usersUrl}}/:id",
							"host": [
								"{{usersUrl}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "58"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "productsUrl",
			"value": "http://localhost:3000/products",
			"type": "string"
		},
		{
			"key": "ordersUrl",
			"value": "http://localhost:3000/orders",
			"type": "string"
		},
		{
			"key": "usersUrl",
			"value": "http://localhost:3000/users",
			"type": "string"
		}
	]
}